        - import Base:start, next, done, eltype, length
        - 
        - # muli-lever iterator
        - immutable MultiLevelIterator
        0     max :: Array{Int,1}
        - end
        - 
        - function start(x::MultiLevelIterator)
        0     s = ones(x.max)
        0     s[1] = 0
        0     return s
        - end
        - 
        - function next(x :: MultiLevelIterator, state :: Array{Int,1})
        0     i = 1
        0     d = false
        0     while (i<=length(x.max)) & ~d
        0         if state[i] < x.max[i]
        0             state[i] += 1
        0             d = true
        -         else
        0             state[i] = 1
        0             i += 1
        -         end
        -     end
        0     return (state,state)
        - end
        - 
        - function done(x::MultiLevelIterator, state::Array{Int,1})
        0     d = true
        0     for (s,m) in zip(state,x.max)
        0         if s<m
        0             d = false
        -         end
        -     end
        0     return d
        - end
        - 
        - eltype(::MultiLevelIterator) = Int
        - 
        - function length(x::MultiLevelIterator)
        -     l = 1
        -     for m in x.max
        -         l *= m
        -     end
        -     return l
        - end
        - 
        - 
